// <auto-generated />
using System;
using CardBattle.DataModels;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace cardbattle.Migrations
{
    [DbContext(typeof(BattleSimulatorContext))]
    partial class BattleSimulatorContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CardBattle.DataModels.Ability", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("Abilities");
                });

            modelBuilder.Entity("CardBattle.DataModels.Battle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AllowableColors")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ManaCap")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Battles");
                });

            modelBuilder.Entity("CardBattle.DataModels.BattleRuleset", b =>
                {
                    b.Property<int>("BattleId")
                        .HasColumnType("int");

                    b.Property<int>("RulesetId")
                        .HasColumnType("int");

                    b.HasKey("BattleId", "RulesetId");

                    b.HasIndex("RulesetId");

                    b.ToTable("BattleRulesets");
                });

            modelBuilder.Entity("CardBattle.DataModels.Card", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rarity")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Cards");
                });

            modelBuilder.Entity("CardBattle.DataModels.CardStats", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Armor")
                        .HasColumnType("int");

                    b.Property<int>("Attack")
                        .HasColumnType("int");

                    b.Property<int>("CardId")
                        .HasColumnType("int");

                    b.Property<int>("Health")
                        .HasColumnType("int");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<int>("Magic")
                        .HasColumnType("int");

                    b.Property<int>("Mana")
                        .HasColumnType("int");

                    b.Property<int>("Ranged")
                        .HasColumnType("int");

                    b.Property<int>("Speed")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.ToTable("CardStats");
                });

            modelBuilder.Entity("CardBattle.DataModels.CardStatsAbility", b =>
                {
                    b.Property<int>("CardStatsId")
                        .HasColumnType("int");

                    b.Property<int>("AbilityId")
                        .HasColumnType("int");

                    b.HasKey("CardStatsId", "AbilityId");

                    b.HasIndex("AbilityId");

                    b.ToTable("CardStatsAbilities");
                });

            modelBuilder.Entity("CardBattle.DataModels.PtrOptions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CardId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Effect")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Max")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatBuffId")
                        .HasColumnType("int");

                    b.Property<string>("StatusEffects")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Target")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TargetType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.HasIndex("StatBuffId")
                        .IsUnique();

                    b.ToTable("PtrOptions");
                });

            modelBuilder.Entity("CardBattle.DataModels.PtrOptionsAbility", b =>
                {
                    b.Property<int>("PtrOptionsId")
                        .HasColumnType("int");

                    b.Property<int>("AbilityId")
                        .HasColumnType("int");

                    b.HasKey("PtrOptionsId", "AbilityId");

                    b.HasIndex("AbilityId");

                    b.ToTable("PtrOptionAbilities");
                });

            modelBuilder.Entity("CardBattle.DataModels.Ruleset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Rulesets");
                });

            modelBuilder.Entity("CardBattle.DataModels.StatBuff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ArmorModifier")
                        .HasColumnType("int");

                    b.Property<int>("AttackModifier")
                        .HasColumnType("int");

                    b.Property<int>("HealthModifier")
                        .HasColumnType("int");

                    b.Property<int>("MagicModifier")
                        .HasColumnType("int");

                    b.Property<int>("RangedModifier")
                        .HasColumnType("int");

                    b.Property<int>("SpeedModifier")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("StatBuffs");
                });

            modelBuilder.Entity("CardBattle.DataModels.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BattleId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BattleId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("CardBattle.DataModels.TeamCard", b =>
                {
                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<int>("CardId")
                        .HasColumnType("int");

                    b.HasKey("TeamId", "CardId");

                    b.HasIndex("CardId");

                    b.ToTable("TeamCards");
                });

            modelBuilder.Entity("CardBattle.DataModels.BattleRuleset", b =>
                {
                    b.HasOne("CardBattle.DataModels.Battle", "Battle")
                        .WithMany("BattleRulesets")
                        .HasForeignKey("BattleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CardBattle.DataModels.Ruleset", "Ruleset")
                        .WithMany("BattleRulesets")
                        .HasForeignKey("RulesetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Battle");

                    b.Navigation("Ruleset");
                });

            modelBuilder.Entity("CardBattle.DataModels.CardStats", b =>
                {
                    b.HasOne("CardBattle.DataModels.Card", "Card")
                        .WithMany("CardStats")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");
                });

            modelBuilder.Entity("CardBattle.DataModels.CardStatsAbility", b =>
                {
                    b.HasOne("CardBattle.DataModels.Ability", "Ability")
                        .WithMany("CardStatsAbilities")
                        .HasForeignKey("AbilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CardBattle.DataModels.CardStats", "CardStats")
                        .WithMany("CardStatsAbilities")
                        .HasForeignKey("CardStatsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ability");

                    b.Navigation("CardStats");
                });

            modelBuilder.Entity("CardBattle.DataModels.PtrOptions", b =>
                {
                    b.HasOne("CardBattle.DataModels.Card", "Card")
                        .WithMany("PtrOptions")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CardBattle.DataModels.StatBuff", "StatBuff")
                        .WithOne()
                        .HasForeignKey("CardBattle.DataModels.PtrOptions", "StatBuffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");

                    b.Navigation("StatBuff");
                });

            modelBuilder.Entity("CardBattle.DataModels.PtrOptionsAbility", b =>
                {
                    b.HasOne("CardBattle.DataModels.Ability", "Ability")
                        .WithMany("PtrOptionsAbilities")
                        .HasForeignKey("AbilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CardBattle.DataModels.PtrOptions", "PtrOptions")
                        .WithMany("PtrOptionsAbilities")
                        .HasForeignKey("PtrOptionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ability");

                    b.Navigation("PtrOptions");
                });

            modelBuilder.Entity("CardBattle.DataModels.Team", b =>
                {
                    b.HasOne("CardBattle.DataModels.Battle", null)
                        .WithMany("Teams")
                        .HasForeignKey("BattleId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("CardBattle.DataModels.TeamCard", b =>
                {
                    b.HasOne("CardBattle.DataModels.Card", "Card")
                        .WithMany("TeamCards")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CardBattle.DataModels.Team", "Team")
                        .WithMany("TeamCards")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("CardBattle.DataModels.Ability", b =>
                {
                    b.Navigation("CardStatsAbilities");

                    b.Navigation("PtrOptionsAbilities");
                });

            modelBuilder.Entity("CardBattle.DataModels.Battle", b =>
                {
                    b.Navigation("BattleRulesets");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("CardBattle.DataModels.Card", b =>
                {
                    b.Navigation("CardStats");

                    b.Navigation("PtrOptions");

                    b.Navigation("TeamCards");
                });

            modelBuilder.Entity("CardBattle.DataModels.CardStats", b =>
                {
                    b.Navigation("CardStatsAbilities");
                });

            modelBuilder.Entity("CardBattle.DataModels.PtrOptions", b =>
                {
                    b.Navigation("PtrOptionsAbilities");
                });

            modelBuilder.Entity("CardBattle.DataModels.Ruleset", b =>
                {
                    b.Navigation("BattleRulesets");
                });

            modelBuilder.Entity("CardBattle.DataModels.Team", b =>
                {
                    b.Navigation("TeamCards");
                });
#pragma warning restore 612, 618
        }
    }
}
